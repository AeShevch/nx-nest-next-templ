package main

import (
	"log"
	"net"

	"order-service/internal/service"
	pb "order-service/proto"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const (
	port = ":5003"
)

func main() {
	// –°–æ–∑–¥–∞–µ–º TCP listener
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("‚ùå Failed to listen on port %s: %v", port, err)
	}

	// –°–æ–∑–¥–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
	grpcServer := grpc.NewServer()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å
	orderService := service.NewOrderService()
	pb.RegisterOrderServiceServer(grpcServer, orderService)

	// –í–∫–ª—é—á–∞–µ–º reflection –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏
	reflection.Register(grpcServer)

	log.Printf("üöÄ Order Service (Go) is running on: 0.0.0.0%s", port)
	log.Printf("üì¶ gRPC reflection enabled for debugging")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("‚ùå Failed to serve gRPC server: %v", err)
	}
} 